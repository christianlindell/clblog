<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ditt och data</title>
    <link>/post/</link>
    <description>Recent content in Posts on Ditt och data</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>sv-se</language>
    <lastBuildDate>Sat, 23 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ladda hem data från Danmarks Statistk med R - Dst:s API</title>
      <link>/2018/06/23/ladda-hem-data-fr%C3%A5n-danmarks-statistk-med-r-med-dst-s-api/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/23/ladda-hem-data-fr%C3%A5n-danmarks-statistk-med-r-med-dst-s-api/</guid>
      <description>Danmarks Statistik har ett API som kan hittas här. Liksom SCB så har Dst en sida där man kan få hjälp med att bygga JSON-frågan till API:et. Den sidan hittar man här.
Beroende på vilken typ av fråga man ställer så måste man använda olika URL:er i POST-anropet till Dst:
Hämta ämnesområden: https://api.statbank.dk/v1/subjectsLista tabeller inom ett ämnesområde: https://api.statbank.dk/v1/tablesHämta metainfo om en tabell: https://api.statbank.dk/v1/tableinfoLadda hem en tabell: https://api.</description>
    </item>
    
    <item>
      <title>Ändra projektion för punktkoordinater</title>
      <link>/2018/06/22/andra-projektion-for-punktkoordinater/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/22/andra-projektion-for-punktkoordinater/</guid>
      <description>Om man får punktkoordinater är de ganska ofta i koordinatsystemet WGS84, vilket är det koordinatsystem som Google Map och många GPS:er använder. Samtidig ska punkterna ofta läggas ut på en karta som är i den svenska standardprojektionen SWEREF99. Man måste alltså ändra projektion för punkterna så att de också anges i SWEREF99.
Koordinater anges med hjälp av en CRS-sträng eller en CRS-kod. Info om vilken CRS-sträng som motsvarar en viss projektion kan man hitta på bland annat http://spatialreference.</description>
    </item>
    
    <item>
      <title>Hämta platsannonsdata från Arbetsförmedlingen med R</title>
      <link>/2018/06/15/h%C3%A4mta-platsannonsdata-fr%C3%A5n-arbetsf%C3%B6rmedlingen-med-r/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/15/h%C3%A4mta-platsannonsdata-fr%C3%A5n-arbetsf%C3%B6rmedlingen-med-r/</guid>
      <description>Arbetsförmedlingens platsbank har ett api som gör att man relativt enkelt kan ladda hem annonser för bearbetning i R.
I det här inlägget beskriver jag hur jag gått tillväga för att ladda hem platsannonser som jag sedan använt för att göra en textanalys av vilka kompetenser som arbetsgivare efterfrågar.
Med införandet av GDPR följer ett eventuellt problem. Platsannonserna innehåller persondata och rättsläget är osäkert vad beträffar rätten att lagra personuppgifter. För säkerhets skull så börjar jag därför med att definiera en funktion som rensar bort alla meningar i löptext vilka innehåller telefonnummer eller mailadresser.</description>
    </item>
    
    <item>
      <title>Ladda hem data från SCB med R del 3 - SCB:s api med csv som format</title>
      <link>/2018/06/12/ladda-hem-data-fran-scb-del-3-scb-s-api-med-csv-som-format/</link>
      <pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/12/ladda-hem-data-fran-scb-del-3-scb-s-api-med-csv-som-format/</guid>
      <description>I förra inlägget visade jag hur man laddar hem data från SCB med json som returformat. Ett alternativ är att istället ladda hem data som csv. Vinsten med det är att jag får med namn i klartext och inte bara koder. För regioner får jag alltså med kommunnamnen och inte bara kommunkod. Nackdelen är att det blir lite besvärligare att få en bra tabellstruktur.
Den här gången har jag valt plocka värden ur alla dimensioner i SCB:s befolkningstabell i det grafiska webbgränssnittet för SCB:s databas.</description>
    </item>
    
    <item>
      <title>Ladda hem data från SCB med R del 2 - SCB:s api med json som format</title>
      <link>/2018/06/10/ladda-hem-data-fr%C3%A5n-scb-del-2-anv%C3%A4nda-scb-s-api/</link>
      <pubDate>Sun, 10 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/10/ladda-hem-data-fr%C3%A5n-scb-del-2-anv%C3%A4nda-scb-s-api/</guid>
      <description>I mitt förra inlägg beskrev jag hur man använder det utmärkta pxweb-paketet för att ladda ner data från SCB:s öppna databas. Men ibland kan det vara smidigare att jobba direkt mot SCB:s API. R har via paketen httr och jsonlite utmärkta funktioner för att jobba med frågor till databaser på nätet.
Men varför krångla med att använda SCB:s API när pxweb redan finns? Det finns några fall då det är smidigare att jobba direkt mot SCB:s API.</description>
    </item>
    
    <item>
      <title>Ladda hem data från SCB med R del 1 -  pxweb</title>
      <link>/2018/06/08/ladda-hem-data-fr%C3%A5n-scb/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/08/ladda-hem-data-fr%C3%A5n-scb/</guid>
      <description>När jag började lära mig R för ett antal år sedan så var något av det krångligaste att läsa in externa data för att få något att jobba med. Numera är det betydligt enklare än det var för åtta - nio år sedan då det ständiga rådet var att spara data som en textfil innan man läste in den i R.
Ett av mina favoritverktyg för att ladda hem SCB-data är ett paket till R som heter pxweb och kan installeras från CRAN.</description>
    </item>
    
  </channel>
</rss>